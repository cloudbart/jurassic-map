
type mapMarker {
  id: ID!
  name: String!
  color: String
  xcoord: Int
  ycoord: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelMapMarkerConnection {
  items: [mapMarker]!
  nextToken: String
}

input ModelMapMarkerFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  color: ModelStringInput
  xcoord: ModelIntInput
  ycoord: ModelIntInput
  and: [ModelMapMarkerFilterInput]
  or: [ModelMapMarkerFilterInput]
  not: ModelMapMarkerFilterInput
}

type Query {
  getMapMarker(id: ID!): mapMarker
  listMapMarkers(filter: ModelMapMarkerFilterInput, limit: Int, nextToken: String): ModelMapMarkerConnection
}

input ModelMapMarkerConditionInput {
  name: ModelStringInput
  color: ModelStringInput
  xcoord: ModelIntInput
  ycoord: ModelIntInput
  and: [ModelMapMarkerConditionInput]
  or: [ModelMapMarkerConditionInput]
  not: ModelMapMarkerConditionInput
}

input CreateMapMarkerInput {
  id: ID
  name: String!
  color: String
  xcoord: Int
  ycoord: Int
}

input UpdateMapMarkerInput {
  id: ID!
  name: String
  color: String
  xcoord: Int
  ycoord: Int
}

input DeleteMapMarkerInput {
  id: ID!
}

type Mutation {
  createMapMarker(input: CreateMapMarkerInput!, condition: ModelMapMarkerConditionInput): mapMarker
  updateMapMarker(input: UpdateMapMarkerInput!, condition: ModelMapMarkerConditionInput): mapMarker
  deleteMapMarker(input: DeleteMapMarkerInput!, condition: ModelMapMarkerConditionInput): mapMarker
}

type Subscription {
  onCreateMapMarker: mapMarker @aws_subscribe(mutations: ["createMapMarker"])
  onUpdateMapMarker: mapMarker @aws_subscribe(mutations: ["updateMapMarker"])
  onDeleteMapMarker: mapMarker @aws_subscribe(mutations: ["deleteMapMarker"])
}

