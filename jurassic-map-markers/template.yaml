AWSTemplateFormatVersion: "2010-09-09"
Description: JurassicMap backend components - dinosaur and vehicle schedules and movement
Transform: AWS::Serverless-2016-10-31
Parameters:
  MapMarkersTable:
    Type: String
    Default: 'mapMarker-tn2uy2oll5ferj2lajmqokzay4-production'
  VehicleRouteCoordsBucket:
    Type: String
    Default: 'jurassicmap-vehiclecoords-source'
  VehicleRouteCoordsTable:
    Type: String
    Default: 'jurassicMapVehicleCoordsTable'

Globals:
  Function:
    Tracing: Active
    Environment:
      Variables: 
        TABLE_NAME: !Ref MapMarkersTable
    Architectures:
      - x86_64
    # Layers:
    #   - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:16"
      
Resources:
  # Lambda layer resource for @Turf GeoSpatial libraries
  turfLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: turf-layer
      Description: Turf Layer for use in JurassicMap controls
      ContentUri: ./turf-layer
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Delete

  # Lambda function for dino map-marker updates and paddock testing
  mapMarkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: mapMarkerLambda.mapMarkerHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref turfLayer
      MemorySize: 128
      Timeout: 100
      Description: JurassicMap map-markers updater function
      Policies:
        # Give Lambda basic execution Permission
        - AWSLambdaBasicExecutionRole
        # Lambda Insights permission
        - CloudWatchLambdaInsightsExecutionRolePolicy
        # Give Lambda DynamoDB read and write permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref MapMarkersTable
      AutoPublishAlias: DevAlias

  # State Machine for orchestration of dino map-marker movement
  mapMarkersUpdateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: mapMarkerUpdateMachine
      Definition:
        StartAt: Map
        States:
          Map:
            Type: Map
            Iterator:
              StartAt: MapMarkerState
              States:
                MapMarkerState:
                  Type: Task
                  Resource: !Ref mapMarkerFunction.Alias
                  End: true
            End: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt [ updateMachineLogGroup, Arn ]
        IncludeExecutionData: false
        Level: 'ALL'
      # Custom inline policy allowing Lambda invoke, CloudWatch metrics and logs
      Policies:
        - Statement:
          - Sid: mapMarkersUpdateMachineExecutionPolicy
            Effect: Allow
            Action:
              - "lambda:InvokeFunction"
              - "cloudwatch:*"
              - "logs:*"
            Resource: "*"
      Tracing:
        Enabled: true
      Events:
        Scheduler01:
          Type: Schedule
          Properties:
            Schedule: 'rate(1 minute)'
            Name: JurassicMapMarkerScheduler01
            Description: Schedule for running mapMarker's update State Machine every minute
            # NOTE Schedulers begin disabled, must be manually enabled
            Enabled: false
            Input: '[{"id":"parasaur01"},{"id":"parasaur02"},{"id":"parasaur03"},{"id":"brachi01"},{"id":"brachi02"},{"id":"brachi03"},{"id":"gallimimus01"},{"id":"gallimimus02"},{"id":"gallimimus03"},{"id":"gallimimus04"},{"id":"gallimimus05"},{"id":"gallimimus06"},{"id":"gallimimus07"},{"id":"gallimimus08"},{"id":"gallimimus09"},{"id":"trike01"},{"id":"trike02"},{"id":"trike03"},{"id":"dilo01"},{"id":"rex01"},{"id":"bary01"},{"id":"procerat01"},{"id":"metricanth01"},{"id":"raptor01"},{"id":"raptor02"},{"id":"raptor03"},{"id":"segi01"},{"id":"segi02"},{"id":"segi03"},{"id":"segi04"},{"id":"segi05"},{"id":"segi06"}]'
        Scheduler02:
          Type: Schedule
          Properties:
            Schedule: 'rate(1 minute)'
            Name: JurassicMapMarkerScheduler02
            Description: Schedule for running mapMarker's update State Machine every minute
            # NOTE Schedulers begin disabled, must be manually enabled
            Enabled: false
            Input: '[{"id":"parasaur01"},{"id":"parasaur02"},{"id":"parasaur03"},{"id":"brachi01"},{"id":"brachi02"},{"id":"brachi03"},{"id":"gallimimus01"},{"id":"gallimimus02"},{"id":"gallimimus03"},{"id":"gallimimus04"},{"id":"gallimimus05"},{"id":"gallimimus06"},{"id":"gallimimus07"},{"id":"gallimimus08"},{"id":"gallimimus09"},{"id":"trike01"},{"id":"trike02"},{"id":"trike03"},{"id":"dilo01"},{"id":"rex01"},{"id":"bary01"},{"id":"procerat01"},{"id":"metricanth01"},{"id":"raptor01"},{"id":"raptor02"},{"id":"raptor03"},{"id":"segi01"},{"id":"segi02"},{"id":"segi03"},{"id":"segi04"},{"id":"segi05"},{"id":"segi06"}]'

  # CloudWatch LogGroup for streaming Step Function dino map marker log events
  updateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/stepfunctions/mapMarkersUpdateMachine-Logs"

  # CloudWatch Dashboard for dino map marker recent-events log events
  recentActivityDashboard:
    Type: 'AWS::CloudWatch::Dashboard'
    Properties:
      DashboardBody: >-
        {"start":"-PT5M","widgets":[{"height":12,"width":12,"y":0,"x":0,"type":"log","properties":{"query":"SOURCE
        '/aws/lambda/JurassicMapMarkerControls-mapMarkerFunction-I7HmmtEB00kl' |
        fields @message | sort @ingestionTime desc | sort @requestId | sort @message
        asc | limit 30 | filter @message like /(?i)(INFO)/ | parse @message
        /(?<Event>(?<=INFO).+)/ | display
        Event","region":"us-east-1","stacked":false,"title":"","view":"table"}}]}
      DashboardName: Recent-Activity

  # State Machine for orchestration of tour vehicle routes map markers
  tourVehiclesStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: tourVehiclesStateMachine
      Definition:
        Comment: 'Tour Vehicle Route1'
        StartAt: fetchVehicleState
        States:
            fetchVehicleState:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch current vehicle status'
                Parameters:
                    TableName: !Ref MapMarkersTable
                    Key: 
                        id.$: $.id
                ResultSelector: 
                    vehicleTourState.$: "$.Item.tourState.S"
                ResultPath: "$.response"
                Next: tourRouteChoice
            tourRouteChoice:
                Type: Choice
                Choices:
                  - And:
                    - Variable: $.routeId
                      StringMatches: fullTour
                    - Variable: $.response.vehicleTourState
                      StringMatches: idle
                    Next: setTourStateActiveFullTour
                  - And:
                    - Variable: $.routeId
                      StringMatches: shortTour
                    - Variable: $.response.vehicleTourState
                      StringMatches: idle
                    Next: setTourStateActiveShortTour
                Default: activeVehicleError
            activeVehicleError:
                Type: Fail
                Cause: Vehicle already active
                Error: vehicleActiveTourError
            setTourStateActiveShortTour:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:updateItem'
                Comment: 'Set tourState to active for short tour'
                Parameters:
                    TableName: !Ref MapMarkersTable
                    Key:
                        id:
                            S.$: $.id
                    UpdateExpression: 'SET tourState = :tourStateValue'
                    ExpressionAttributeValues:
                        ':tourStateValue':
                            S: shortTour
                ResultPath: null
                Next: fetchSegment1a
            fetchSegment1a:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch segment1a coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment1a
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                ResultPath: "$.coords"
                Next: tourSegment1a
            tourSegment1a:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tourSegment1a map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: segment1aMap
                  States:
                    segment1aMap:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles segment1a'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.ycoord.S
                      Next: segment1aWait
                    segment1aWait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: fetchSegment5
            setTourStateActiveFullTour:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:updateItem'
                Comment: 'Set tourState to active for full tour'
                Parameters:
                    TableName: !Ref MapMarkersTable
                    Key:
                        id:
                            S.$: $.id
                    UpdateExpression: 'SET tourState = :tourStateValue'
                    ExpressionAttributeValues:
                        ':tourStateValue':
                            S: fullTour
                ResultPath: null
                Next: fetchSegment1
            fetchSegment1:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch segment1 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment1
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                ResultPath: "$.coords"
                Next: tourSegment1
            tourSegment1:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'toursegment1 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: segment1Map
                  States:
                    segment1Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles segment1'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.ycoord.S
                      Next: segment1Wait
                    segment1Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: DiloWait
            DiloWait:
                Type: Wait
                Seconds: 30
                Next: fetchSegment2
            fetchSegment2:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch segment2 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment2
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                ResultPath: "$.coords"
                Next: tourSegment2              
            tourSegment2:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tour Segment2 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: Segment2Map
                  States:
                    Segment2Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles segment2'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.ycoord.S
                      Next: Segment2Wait
                    Segment2Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: ProceratWait
            ProceratWait:
                Type: Wait
                Seconds: 30
                Next: fetchSegment3
            fetchSegment3:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch segment3 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment3
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                ResultPath: "$.coords"
                Next: tourSegment3              
            tourSegment3:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tour Segment3 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: Segment3Map
                  States:
                    Segment3Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles segment3'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.ycoord.S
                      Next: Segment3Wait
                    Segment3Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: SegisaurusWait
            SegisaurusWait:
                Type: Wait
                Seconds: 30
                Next: fetchSegment4
            fetchSegment4:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch segment4 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment4
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                ResultPath: "$.coords"
                Next: tourSegment4              
            tourSegment4:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tour Segment4 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: Segment4Map
                  States:
                    Segment4Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles segment4'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.ycoord.S
                      Next: Segment4Wait
                    Segment4Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: fetchSegment5
            fetchSegment5:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch segment5 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment5
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                ResultPath: "$.coords"
                Next: tourSegment5              
            tourSegment5:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tour Segment5 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: Segment5Map
                  States:
                    Segment5Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles segment5'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.ycoord.S
                      Next: Segment5Wait
                    Segment5Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: BaryonyxWait
            BaryonyxWait:
                Type: Wait
                Seconds: 30
                Next: fetchSegment6
            fetchSegment6:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch segment6 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment6
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                ResultPath: "$.coords"
                Next: tourSegment6              
            tourSegment6:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tour Segment6 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: Segment6Map
                  States:
                    Segment6Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles segment6'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.ycoord.S
                      Next: Segment6Wait
                    Segment6Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: RexWait
            RexWait:
                Type: Wait
                Seconds: 30
                Next: fetchSegment7
            fetchSegment7:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch segment7 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment7
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                ResultPath: "$.coords"
                Next: tourSegment7              
            tourSegment7:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tour Segment7 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: Segment7Map
                  States:
                    Segment7Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles segment7'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.ycoord.S
                      Next: Segment7Wait
                    Segment7Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: MetricanthWait
            MetricanthWait:
                Type: Wait
                Seconds: 30
                Next: fetchSegment8
            fetchSegment8:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch segment8 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment8
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                ResultPath: "$.coords"
                Next: tourSegment8              
            tourSegment8:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tour Segment8 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: Segment8Map
                  States:
                    Segment8Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles segment8'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.ycoord.S
                      Next: Segment8Wait
                    Segment8Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: TrikeWait
            TrikeWait:
                Type: Wait
                Seconds: 30
                Next: fetchSegment9
            fetchSegment9:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch segment9 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment9
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                ResultPath: "$.coords"
                Next: tourSegment9              
            tourSegment9:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tour Segment9 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: Segment9Map
                  States:
                    Segment9Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles segment9'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.ycoord.S
                      Next: Segment9Wait
                    Segment9Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: HerbivoreWait
            HerbivoreWait:
                Type: Wait
                Seconds: 30
                Next: fetchSegment10
            fetchSegment10:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch segment10 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment10
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                ResultPath: "$.coords"
                Next: tourSegment10              
            tourSegment10:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tour Segment10 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: Segment10Map
                  States:
                    Segment10Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles segment10'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.ycoord.S
                      Next: Segment10Wait
                    Segment10Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: GallimimusWait
            GallimimusWait:
                Type: Wait
                Seconds: 30
                Next: fetchSegment11
            fetchSegment11:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch segment11 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment11
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                ResultPath: "$.coords"
                Next: tourSegment11              
            tourSegment11:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tour Segment11 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: Segment11Map
                  States:
                    Segment11Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles segment11'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.ycoord.S
                      Next: Segment11Wait
                    Segment11Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: setTourStateIdle
            setTourStateIdle:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:updateItem'
                Comment: 'Return tourState to idle'
                Parameters:
                    TableName: !Ref MapMarkersTable
                    Key:
                        id:
                            S.$: $.id
                    UpdateExpression: 'SET tourState = :tourStateValue'
                    ExpressionAttributeValues:
                        ':tourStateValue':
                            S: idle
                ResultPath: null
                End: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt [ updateMachineLogGroup, Arn ]
        IncludeExecutionData: false
        Level: 'ALL'
      # Custom inline policy allowing Lambda invoke, CloudWatch metrics and logs
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref vehicleRouteCoordinatesDDBTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MapMarkersTable
        - Statement:
          - Sid: tourVehiclesStateMachineExecution
            Effect: Allow
            Action:
              - "lambda:InvokeFunction"
              - "cloudwatch:*"
              - "logs:*"
            Resource: "*"
      Tracing:
        Enabled: true

  # DynamoDB table for vehicle route coordinates
  vehicleRouteCoordinatesDDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: segmentId
        Type: String
      TableName: !Ref VehicleRouteCoordsTable

  # S3 bucket for importing data
  vehicleRouteCoordsSourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref VehicleRouteCoordsBucket

  # Lambda function for loading vehicle route coordinates from S3 input bucket
  vehicleRouteImportFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: src/handlers/
      Handler: ddbLoader.handler
      Runtime: nodejs14.x
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          DDBtable: !Ref vehicleRouteCoordinatesDDBTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref vehicleRouteCoordinatesDDBTable        
        - S3CrudPolicy:
            BucketName: !Ref VehicleRouteCoordsBucket
      Events:
        FileUpload:
          Type: S3
          Properties:
            Bucket: !Ref vehicleRouteCoordsSourceBucket
            Events: s3:ObjectCreated:*
            Filter: 
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.json' 

  # SNS Topic for relaying messages about CodePipiline release events
  codePipelineReleaseTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: "Jurassic Map Release Preview Topic"
      Subscription: 
        - Endpoint: "pibrocher@gmail.com"
          Protocol: "email"
      TopicName: "jurassicMapReleasePreviewTopic"