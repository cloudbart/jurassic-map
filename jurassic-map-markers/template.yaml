AWSTemplateFormatVersion: "2010-09-09"
Description: JurassicMap movement generation, paddock testing, & scheduling components
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Tracing: Active
    Architectures:
        - x86_64
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:16"
Resources:
  # Lambda layer resource for @Turf GeoSpatial libraries
  turfLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: turf-layer
      Description: Turf Layer for use in JurassicMap controls
      ContentUri: ./turf-layer
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Retain
  # Lambda function for performing map marker updates and paddock testing
  mapMarkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/mapMarkerLambda.mapMarkerHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref turfLayer
      MemorySize: 128
      Timeout: 100
      Description: JurassicMap map-markers updater function
      Policies:
        # Give Lambda basic execution Permission
        - AWSLambdaBasicExecutionRole
        # Lambda Insights permission
        - CloudWatchLambdaInsightsExecutionRolePolicy
        # Give Lambda DynamoDB read and write permissions
        - DynamoDBReadPolicy:
            TableName: mapMarker-yr5q33is7ngxno7igxguwgezye-dev
        - DynamoDBWritePolicy:
            TableName: mapMarker-yr5q33is7ngxno7igxguwgezye-dev
      AutoPublishAlias: DevAlias
  # State Machine for orchestration map marker updates and controls
  tourVehiclesStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: tourVehiclesStateMachine
      Definition:
        Comment: 'Tour Vehicle Route1'
        StartAt: setTourStateActiveRoute1
        States:
            setTourStateActiveRoute1:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:updateItem'
                Comment: 'Set tourState to active for route1'
                Parameters:
                    TableName: mapMarker-yr5q33is7ngxno7igxguwgezye-dev
                    Key:
                        id:
                            S.$: $.id
                    UpdateExpression: 'SET tourState = :tourStateValue'
                    ExpressionAttributeValues:
                        ':tourStateValue':
                            S: activeRoute1
                ResultPath: null
                Next: tourRoute1Segment1
            tourRoute1Segment1:
                Type: Map
                ItemsPath: '$.route1segment1'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tourRoute1segment1 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: route1segment1Map
                  States:
                    route1segment1Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles route1 segment1'
                      Parameters:
                          TableName: mapMarker-yr5q33is7ngxno7igxguwgezye-dev
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  N.$: $.coords.xcoord
                              ':yValue':
                                  N.$: $.coords.ycoord
                      Next: route1segment1Wait
                    route1segment1Wait:
                      Type: Wait
                      Seconds: 15
                      End: true
                ResultPath: null
                Next: route1DiloWait
            route1DiloWait:
                Type: Wait
                Seconds: 45
                Next: tourRoute1Segment2
            tourRoute1Segment2:
                Type: Map
                ItemsPath: '$.route1segment2'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tourRoute1 Segment2 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: route1Segment2Map
                  States:
                    route1Segment2Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles route1 segment2'
                      Parameters:
                          TableName: mapMarker-yr5q33is7ngxno7igxguwgezye-dev
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  N.$: $.coords.xcoord
                              ':yValue':
                                  N.$: $.coords.ycoord
                      Next: route1Segment2Wait
                    route1Segment2Wait:
                      Type: Wait
                      Seconds: 15
                      End: true
                ResultPath: null
                Next: route1ProceratWait
            route1ProceratWait:
                Type: Wait
                Seconds: 45
                Next: tourRoute1Segment3
            tourRoute1Segment3:
                Type: Map
                ItemsPath: '$.route1segment3'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tourRoute1 Segment3 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: route1Segment3Map
                  States:
                    route1Segment3Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles route1 segment3'
                      Parameters:
                          TableName: mapMarker-yr5q33is7ngxno7igxguwgezye-dev
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  N.$: $.coords.xcoord
                              ':yValue':
                                  N.$: $.coords.ycoord
                      Next: route1Segment3Wait
                    route1Segment3Wait:
                      Type: Wait
                      Seconds: 15
                      End: true
                ResultPath: null
                Next: route1SegisaurusWait
            route1SegisaurusWait:
                Type: Wait
                Seconds: 45
                Next: setTourStateIdle
            setTourStateIdle:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:updateItem'
                Comment: 'Return tourState to idle'
                Parameters:
                    TableName: mapMarker-yr5q33is7ngxno7igxguwgezye-dev
                    Key:
                        id:
                            S.$: $.id
                    UpdateExpression: 'SET tourState = :tourStateValue'
                    ExpressionAttributeValues:
                        ':tourStateValue':
                            S: idle
                ResultPath: null
                End: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt [ updateMachineLogGroup, Arn ]
        IncludeExecutionData: false
        Level: 'ALL'
      # Custom inline policy allowing Lambda invoke, CloudWatch metrics and logs
      Policies:
        - DynamoDBReadPolicy:
            TableName: mapMarker-yr5q33is7ngxno7igxguwgezye-dev
        - DynamoDBWritePolicy:
            TableName: mapMarker-yr5q33is7ngxno7igxguwgezye-dev
        - Statement:
          - Sid: tourVehiclesStateMachineExecution
            Effect: Allow
            Action:
              - "lambda:InvokeFunction"
              - "cloudwatch:*"
              - "logs:*"
            Resource: "*"
      Tracing:
        Enabled: true
  mapMarkersUpdateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: mapMarkerUpdateMachine
      Definition:
        StartAt: Map
        States:
          Map:
            Type: Map
            Iterator:
              StartAt: MapMarkerState
              States:
                MapMarkerState:
                  Type: Task
                  Resource: !Ref mapMarkerFunction.Alias
                  End: true
            End: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt [ updateMachineLogGroup, Arn ]
        IncludeExecutionData: false
        Level: 'ALL'
      # Custom inline policy allowing Lambda invoke, CloudWatch metrics and logs
      Policies:
        - Statement:
          - Sid: mapMarkersUpdateMachineExecutionPolicy
            Effect: Allow
            Action:
              - "lambda:InvokeFunction"
              - "cloudwatch:*"
              - "logs:*"
            Resource: "*"
      Tracing:
        Enabled: true
      Events:
        Scheduler01:
          Type: Schedule
          Properties:
            Schedule: 'rate(1 minute)'
            Name: JurassicMapMarkerScheduler01
            Description: Schedule for running mapMarker's update State Machine every minute
            # NOTE Schedulers begin disabled, must be manually enabled
            Enabled: false
            Input: '[{"id":"parasaur01"},{"id":"parasaur02"},{"id":"parasaur03"},{"id":"brachi01"},{"id":"brachi02"},{"id":"brachi03"},{"id":"gallimimus01"},{"id":"gallimimus02"},{"id":"gallimimus03"},{"id":"gallimimus04"},{"id":"gallimimus05"},{"id":"gallimimus06"},{"id":"gallimimus07"},{"id":"gallimimus08"},{"id":"gallimimus09"},{"id":"trike01"},{"id":"trike02"},{"id":"trike03"},{"id":"dilo01"},{"id":"rex01"},{"id":"bary01"},{"id":"procerat01"},{"id":"metricanth01"},{"id":"raptor01"},{"id":"raptor02"},{"id":"raptor03"},{"id":"segi01"},{"id":"segi02"},{"id":"segi03"},{"id":"segi04"},{"id":"segi05"},{"id":"segi06"}]'
        Scheduler02:
          Type: Schedule
          Properties:
            Schedule: 'rate(1 minute)'
            Name: JurassicMapMarkerScheduler02
            Description: Schedule for running mapMarker's update State Machine every minute
            # NOTE Schedulers begin disabled, must be manually enabled
            Enabled: false
            Input: '[{"id":"parasaur01"},{"id":"parasaur02"},{"id":"parasaur03"},{"id":"brachi01"},{"id":"brachi02"},{"id":"brachi03"},{"id":"gallimimus01"},{"id":"gallimimus02"},{"id":"gallimimus03"},{"id":"gallimimus04"},{"id":"gallimimus05"},{"id":"gallimimus06"},{"id":"gallimimus07"},{"id":"gallimimus08"},{"id":"gallimimus09"},{"id":"trike01"},{"id":"trike02"},{"id":"trike03"},{"id":"dilo01"},{"id":"rex01"},{"id":"bary01"},{"id":"procerat01"},{"id":"metricanth01"},{"id":"raptor01"},{"id":"raptor02"},{"id":"raptor03"},{"id":"segi01"},{"id":"segi02"},{"id":"segi03"},{"id":"segi04"},{"id":"segi05"},{"id":"segi06"}]'
  # CloudWatch LogGroup for streaming Step Function log events
  updateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/stepfunctions/mapMarkersUpdateMachine-Logs"
  # CloudWatch Dashboard for receent-events log events
  recentActivityDashboard:
    Type: 'AWS::CloudWatch::Dashboard'
    Properties:
      DashboardBody: >-
        {"start":"-PT5M","widgets":[{"height":12,"width":12,"y":0,"x":0,"type":"log","properties":{"query":"SOURCE
        '/aws/lambda/JurassicMapMarkerControls-mapMarkerFunction-I7HmmtEB00kl' |
        fields @message | sort @ingestionTime desc | sort @requestId | sort @message
        asc | limit 30 | filter @message like /(?i)(INFO)/ | parse @message
        /(?<Event>(?<=INFO).+)/ | display
        Event","region":"us-east-1","stacked":false,"title":"","view":"table"}}]}
      DashboardName: Recent-Activity
  codePipelineReleaseTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: "Jurassic Map Release Preview Topic"
      Subscription: 
        - Endpoint: "pibrocher@gmail.com"
          Protocol: "email"
      TopicName: "jurassicMapReleasePreviewTopic"
Outputs:
  managementURL:
    Description: Serverless application mgmt page URL
    Value: 'https://console.aws.amazon.com/lambda/home?region=us-east-1#/applications/JurassicMapMarkerControls'