AWSTemplateFormatVersion: "2010-09-09"
Description: JurassicMap backend components - dinosaur and vehicle schedules and movement
Transform: AWS::Serverless-2016-10-31
Parameters:
  MapMarkersTable:
    Type: String
    Default: 'mapMarker-yr5q33is7ngxno7igxguwgezye-dev'
  VehicleRouteCoordsBucket:
    Type: String
    Default: 'jurassicmap-vehiclecoords-source'
  VehicleRouteCoordsTable:
    Type: String
    Default: 'jurassicMapVehicleCoordsTable'

Globals:
  Function:
    Tracing: Active
    Architectures:
      - x86_64
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:16"
      
Resources:
  # Lambda layer resource for @Turf GeoSpatial libraries
  turfLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: turf-layer
      Description: Turf Layer for use in JurassicMap controls
      ContentUri: ./turf-layer
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Delete

  # Lambda function for dino map-marker updates and paddock testing
  mapMarkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: mapMarkerLambda.mapMarkerHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref turfLayer
      MemorySize: 128
      Timeout: 100
      Description: JurassicMap map-markers updater function
      Policies:
        # Give Lambda basic execution Permission
        - AWSLambdaBasicExecutionRole
        # Lambda Insights permission
        - CloudWatchLambdaInsightsExecutionRolePolicy
        # Give Lambda DynamoDB read and write permissions
        - DynamoDBReadPolicy:
            TableName: !Ref MapMarkersTable
        - DynamoDBWritePolicy:
            TableName: !Ref MapMarkersTable
      AutoPublishAlias: DevAlias

  # State Machine for orchestration of dino map-marker movement
  mapMarkersUpdateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: mapMarkerUpdateMachine
      Definition:
        StartAt: Map
        States:
          Map:
            Type: Map
            Iterator:
              StartAt: MapMarkerState
              States:
                MapMarkerState:
                  Type: Task
                  Resource: !Ref mapMarkerFunction.Alias
                  End: true
            End: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt [ updateMachineLogGroup, Arn ]
        IncludeExecutionData: false
        Level: 'ALL'
      # Custom inline policy allowing Lambda invoke, CloudWatch metrics and logs
      Policies:
        - Statement:
          - Sid: mapMarkersUpdateMachineExecutionPolicy
            Effect: Allow
            Action:
              - "lambda:InvokeFunction"
              - "cloudwatch:*"
              - "logs:*"
            Resource: "*"
      Tracing:
        Enabled: true
      Events:
        Scheduler01:
          Type: Schedule
          Properties:
            Schedule: 'rate(1 minute)'
            Name: JurassicMapMarkerScheduler01
            Description: Schedule for running mapMarker's update State Machine every minute
            # NOTE Schedulers begin disabled, must be manually enabled
            Enabled: false
            Input: '[{"id":"parasaur01"},{"id":"parasaur02"},{"id":"parasaur03"},{"id":"brachi01"},{"id":"brachi02"},{"id":"brachi03"},{"id":"gallimimus01"},{"id":"gallimimus02"},{"id":"gallimimus03"},{"id":"gallimimus04"},{"id":"gallimimus05"},{"id":"gallimimus06"},{"id":"gallimimus07"},{"id":"gallimimus08"},{"id":"gallimimus09"},{"id":"trike01"},{"id":"trike02"},{"id":"trike03"},{"id":"dilo01"},{"id":"rex01"},{"id":"bary01"},{"id":"procerat01"},{"id":"metricanth01"},{"id":"raptor01"},{"id":"raptor02"},{"id":"raptor03"},{"id":"segi01"},{"id":"segi02"},{"id":"segi03"},{"id":"segi04"},{"id":"segi05"},{"id":"segi06"}]'
        Scheduler02:
          Type: Schedule
          Properties:
            Schedule: 'rate(1 minute)'
            Name: JurassicMapMarkerScheduler02
            Description: Schedule for running mapMarker's update State Machine every minute
            # NOTE Schedulers begin disabled, must be manually enabled
            Enabled: false
            Input: '[{"id":"parasaur01"},{"id":"parasaur02"},{"id":"parasaur03"},{"id":"brachi01"},{"id":"brachi02"},{"id":"brachi03"},{"id":"gallimimus01"},{"id":"gallimimus02"},{"id":"gallimimus03"},{"id":"gallimimus04"},{"id":"gallimimus05"},{"id":"gallimimus06"},{"id":"gallimimus07"},{"id":"gallimimus08"},{"id":"gallimimus09"},{"id":"trike01"},{"id":"trike02"},{"id":"trike03"},{"id":"dilo01"},{"id":"rex01"},{"id":"bary01"},{"id":"procerat01"},{"id":"metricanth01"},{"id":"raptor01"},{"id":"raptor02"},{"id":"raptor03"},{"id":"segi01"},{"id":"segi02"},{"id":"segi03"},{"id":"segi04"},{"id":"segi05"},{"id":"segi06"}]'

  # CloudWatch LogGroup for streaming Step Function dino map marker log events
  updateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/stepfunctions/mapMarkersUpdateMachine-Logs"

  # CloudWatch Dashboard for dino map marker recent-events log events
  recentActivityDashboard:
    Type: 'AWS::CloudWatch::Dashboard'
    Properties:
      DashboardBody: >-
        {"start":"-PT5M","widgets":[{"height":12,"width":12,"y":0,"x":0,"type":"log","properties":{"query":"SOURCE
        '/aws/lambda/JurassicMapMarkerControls-mapMarkerFunction-I7HmmtEB00kl' |
        fields @message | sort @ingestionTime desc | sort @requestId | sort @message
        asc | limit 30 | filter @message like /(?i)(INFO)/ | parse @message
        /(?<Event>(?<=INFO).+)/ | display
        Event","region":"us-east-1","stacked":false,"title":"","view":"table"}}]}
      DashboardName: Recent-Activity

  # State Machine for orchestration of tour vehicle routes map markers
  tourVehiclesStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: tourVehiclesStateMachine
      Definition:
        Comment: 'Tour Vehicle Route1'
        StartAt: setTourStateActiveRoute1
        States:
            setTourStateActiveRoute1:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:updateItem'
                Comment: 'Set tourState to active for route1'
                Parameters:
                    TableName: !Ref MapMarkersTable
                    Key:
                        id:
                            S.$: $.id
                    UpdateExpression: 'SET tourState = :tourStateValue'
                    ExpressionAttributeValues:
                        ':tourStateValue':
                            S: activeRoute1
                ResultPath: null
                Next: fetchRoute1Segment1
            fetchRoute1Segment1:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch route1 segement1 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment1
                ResultPath: "$.coords"
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                Next: tourRoute1Segment1
            tourRoute1Segment1:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tourRoute1segment1 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: route1segment1Map
                  States:
                    route1segment1Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles route1 segment1'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.ycoord.S
                      Next: route1segment1Wait
                    route1segment1Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: route1DiloWait
            route1DiloWait:
                Type: Wait
                Seconds: 30
                Next: fetchRoute1Segment2
            fetchRoute1Segment2:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch route1 segement2 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment2
                ResultPath: "$.coords"
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                Next: tourRoute1Segment2              
            tourRoute1Segment2:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tourRoute1 Segment2 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: route1Segment2Map
                  States:
                    route1Segment2Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles route1 segment2'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.ycoord.S
                      Next: route1Segment2Wait
                    route1Segment2Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: route1ProceratWait
            route1ProceratWait:
                Type: Wait
                Seconds: 30
                Next: fetchRoute1Segment3
            fetchRoute1Segment3:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch route1 segement3 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment3
                ResultPath: "$.coords"
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                Next: tourRoute1Segment3              
            tourRoute1Segment3:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tourRoute1 Segment3 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: route1Segment3Map
                  States:
                    route1Segment3Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles route1 segment3'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.xcoord.S
                      Next: route1Segment3Wait
                    route1Segment3Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: route1SegisaurusWait
            route1SegisaurusWait:
                Type: Wait
                Seconds: 30
                Next: fetchRoute1Segment4
            fetchRoute1Segment4:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch route1 segement4 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment4
                ResultPath: "$.coords"
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                Next: tourRoute1Segment4              
            tourRoute1Segment4:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tourRoute1 Segment4 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: route1Segment4Map
                  States:
                    route1Segment4Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles route1 segment4'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.xcoord.S
                      Next: route1Segment4Wait
                    route1Segment4Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: fetchRoute1Segment5
            fetchRoute1Segment5:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch route1 segement5 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment5
                ResultPath: "$.coords"
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                Next: tourRoute1Segment5              
            tourRoute1Segment5:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tourRoute1 Segment5 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: route1Segment5Map
                  States:
                    route1Segment5Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles route1 segment5'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.xcoord.S
                      Next: route1Segment5Wait
                    route1Segment5Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: route1BaryonyxWait
            route1BaryonyxWait:
                Type: Wait
                Seconds: 30
                Next: fetchRoute1Segment6
            fetchRoute1Segment6:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch route1 segement6 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment6
                ResultPath: "$.coords"
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                Next: tourRoute1Segment6              
            tourRoute1Segment6:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tourRoute1 Segment6 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: route1Segment6Map
                  States:
                    route1Segment6Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles route1 segment6'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.xcoord.S
                      Next: route1Segment6Wait
                    route1Segment6Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: route1RexWait
            route1RexWait:
                Type: Wait
                Seconds: 30
                Next: fetchRoute1Segment7
            fetchRoute1Segment7:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch route1 segement7 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment7
                ResultPath: "$.coords"
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                Next: tourRoute1Segment7              
            tourRoute1Segment7:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tourRoute1 Segment7 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: route1Segment7Map
                  States:
                    route1Segment7Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles route1 segment7'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.xcoord.S
                      Next: route1Segment7Wait
                    route1Segment7Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: route1MetricanthWait
            route1MetricanthWait:
                Type: Wait
                Seconds: 30
                Next: fetchRoute1Segment8
            fetchRoute1Segment8:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch route1 segement8 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment8
                ResultPath: "$.coords"
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                Next: tourRoute1Segment8              
            tourRoute1Segment8:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tourRoute1 Segment8 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: route1Segment8Map
                  States:
                    route1Segment8Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles route1 segment8'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.xcoord.S
                      Next: route1Segment8Wait
                    route1Segment8Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: route1TrikeWait
            route1TrikeWait:
                Type: Wait
                Seconds: 30
                Next: fetchRoute1Segment9
            fetchRoute1Segment9:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch route1 segement9 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment9
                ResultPath: "$.coords"
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                Next: tourRoute1Segment9              
            tourRoute1Segment9:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tourRoute1 Segment9 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: route1Segment9Map
                  States:
                    route1Segment9Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles route1 segment9'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.xcoord.S
                      Next: route1Segment9Wait
                    route1Segment9Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: route1HerbivoreWait
            route1HerbivoreWait:
                Type: Wait
                Seconds: 30
                Next: fetchRoute1Segment10
            fetchRoute1Segment10:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:getItem'
                Comment: 'Fetch route1 segement10 coordinates'
                Parameters:
                    TableName: !Ref VehicleRouteCoordsTable
                    Key:
                        segmentId: routeSegment10
                ResultPath: "$.coords"
                ResultSelector:
                    coordsList.$: "$.Item.coords.L"
                Next: tourRoute1Segment10              
            tourRoute1Segment10:
                Type: Map
                ItemsPath: '$.coords.coordsList'
                Parameters:
                  id.$: $.id
                  coords.$: $$.Map.Item.Value
                Comment: 'tourRoute1 Segment10 map state'
                MaxConcurrency: 1
                Iterator:
                  StartAt: route1Segment10Map
                  States:
                    route1Segment10Map:
                      Type: Task
                      Resource: 'arn:aws:states:::dynamodb:updateItem'
                      Comment: 'Begin tour vehicles route1 segment10'
                      Parameters:
                          TableName: !Ref MapMarkersTable
                          Key:
                              id:
                                  S.$: $.id
                          UpdateExpression: 'SET xcoord = :xValue, ycoord = :yValue'
                          ExpressionAttributeValues:
                              ':xValue':
                                  S.$: $.coords.M.xcoord.S
                              ':yValue':
                                  S.$: $.coords.M.xcoord.S
                      Next: route1Segment10Wait
                    route1Segment10Wait:
                      Type: Wait
                      Seconds: 10
                      End: true
                ResultPath: null
                Next: setTourStateIdle
            setTourStateIdle:
                Type: Task
                Resource: 'arn:aws:states:::dynamodb:updateItem'
                Comment: 'Return tourState to idle'
                Parameters:
                    TableName: !Ref MapMarkersTable
                    Key:
                        id:
                            S.$: $.id
                    UpdateExpression: 'SET tourState = :tourStateValue'
                    ExpressionAttributeValues:
                        ':tourStateValue':
                            S: idle
                ResultPath: null
                End: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt [ updateMachineLogGroup, Arn ]
        IncludeExecutionData: false
        Level: 'ALL'
      # Custom inline policy allowing Lambda invoke, CloudWatch metrics and logs
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref vehicleRouteCoordinatesDDBTable
        - DynamoDBWritePolicy:
            TableName: !Ref MapMarkersTable
        - Statement:
          - Sid: tourVehiclesStateMachineExecution
            Effect: Allow
            Action:
              - "lambda:InvokeFunction"
              - "cloudwatch:*"
              - "logs:*"
            Resource: "*"
      Tracing:
        Enabled: true

  # DynamoDB table for vehicle route coordinates
  vehicleRouteCoordinatesDDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: segmentId
        Type: String
      TableName: !Ref VehicleRouteCoordsTable

  # S3 bucket for importing data
  vehicleRouteCoordsSourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref VehicleRouteCoordsBucket

  # Lambda function for loading vehicle route coordinates from S3 input bucket
  vehicleRouteImportFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: src/handlers/
      Handler: ddbLoader.handler
      Runtime: nodejs14.x
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          DDBtable: !Ref vehicleRouteCoordinatesDDBTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref vehicleRouteCoordinatesDDBTable        
        - S3CrudPolicy:
            BucketName: !Ref VehicleRouteCoordsBucket
      Events:
        FileUpload:
          Type: S3
          Properties:
            Bucket: !Ref vehicleRouteCoordsSourceBucket
            Events: s3:ObjectCreated:*
            Filter: 
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.json' 

  # SNS Topic for relaying messages about CodePipiline release events
  codePipelineReleaseTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: "Jurassic Map Release Preview Topic"
      Subscription: 
        - Endpoint: "pibrocher@gmail.com"
          Protocol: "email"
      TopicName: "jurassicMapReleasePreviewTopic"
Outputs:
  managementURL:
    Description: Serverless application mgmt page URL
    Value: 'https://console.aws.amazon.com/lambda/home?region=us-east-1#/applications/JurassicMapMarkerControls'