AWSTemplateFormatVersion: "2010-09-09"
Description: JurassicMap movement generation, paddock testing, & scheduling components
Transform: AWS::Serverless-2016-10-31
Resources:
  # Lambda layer resource for @Turf GeoSpatial libraries
  turfLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: turf-layer
      Description: Turf Layer for use in JurassicMap controls
      ContentUri: ./turf-layer
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Delete
  # Lambda function for performing map marker updates and paddock testing
  mapMarkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/mapMarkerLambda.mapMarkerHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref turfLayer
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: JurassicMap map-markers updater function
      Policies:
        # Give Lambda basic execution Permission
        - AWSLambdaBasicExecutionRole
        # Give Lambda DynamoDB read and write permissions
        - DynamoDBReadPolicy:
            TableName: mapMarker-yr5q33is7ngxno7igxguwgezye-dev
        - DynamoDBWritePolicy:
            TableName: mapMarker-yr5q33is7ngxno7igxguwgezye-dev
      Tracing: Active
  # Lambda function for performing vehicle tours map marker updates
  mapMarkerTourVehiclesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/mapMarkerLambda.mapMarkerHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref turfLayer
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: JurassicMap tour vehicle map-markers updater function
      Policies:
        # Give Lambda basic execution Permission
        - AWSLambdaBasicExecutionRole
        # Give Lambda DynamoDB read and write permissions
        - DynamoDBReadPolicy:
            TableName: mapMarker-yr5q33is7ngxno7igxguwgezye-dev
        - DynamoDBWritePolicy:
            TableName: mapMarker-yr5q33is7ngxno7igxguwgezye-dev
      Tracing: Active
  # State Machine for orchestration map marker updates and controls
  mapMarkersUpdateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: mapMarkerUpdateMachine
      Definition:
        StartAt: Map
        States:
          Map:
            Type: Map
            Iterator:
              StartAt: MapMarkerState
              States:
                MapMarkerState:
                  Type: Task
                  Resource: !GetAtt mapMarkerFunction.Arn
                  End: true
            End: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt [ updateMachineLogGroup, Arn ]
        IncludeExecutionData: false
        Level: 'ALL'
      Tracing:
        Enabled: true
      # Custom inline policy allowing Lambda invoke, CloudWatch metrics and logs
      Policies:
        - Statement:
          - Sid: mapMarkersUpdateMachineExecutionPolicy
            Effect: Allow
            Action:
              - "lambda:InvokeFunction"
              - "cloudwatch:*"
              - "logs:*"
            Resource: "*"
      Events:
        Scheduler01:
          Type: Schedule
          Properties:
            Schedule: 'rate(1 minute)'
            Name: JurassicMapMarkerScheduler01
            Description: Schedule for running mapMarker's update State Machine every minute
            # NOTE Schedulers begin disabled, must be manually enabled
            Enabled: false
            Input: '[{"id":"brachi01"},{"id":"brachi02"},{"id":"brachi03"},{"id":"trike01"},{"id":"trike02"},{"id":"trike03"},{"id":"dilo01"},{"id":"rex01"},{"id":"bary01"},{"id":"procerat01"},{"id":"metricanth01"}]'
        Scheduler02:
          Type: Schedule
          Properties:
            Schedule: 'rate(1 minute)'
            Name: JurassicMapMarkerScheduler02
            Description: Schedule for running mapMarker's update State Machine every minute
            # NOTE Schedulers begin disabled, must be manually enabled
            Enabled: false
            Input: '[{"id":"brachi01"},{"id":"brachi02"},{"id":"brachi03"},{"id":"trike01"},{"id":"trike02"},{"id":"trike03"},{"id":"dilo01"},{"id":"rex01"},{"id":"bary01"},{"id":"procerat01"},{"id":"metricanth01"}]'
  # CloudWatch LogGroup for streaming Step Function log events
  updateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/stepfunctions/mapMarkersUpdateMachine-Logs"